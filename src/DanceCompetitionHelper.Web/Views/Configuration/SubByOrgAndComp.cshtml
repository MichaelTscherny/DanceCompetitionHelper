@using DanceCompetitionHelper.Database.Enum
@using DanceCompetitionHelper.Database.Tables
@using DanceCompetitionHelper.Database.Extensions
@using DanceCompetitionHelper.Web.Helper.Configuration

@* SubByOrgAndComp.cshtml *@
@model Dictionary<Guid, Dictionary<Guid, Dictionary<Guid, ConfigurationValue>>>

@{
    var originCompetitionId = (ViewData["OriginCompetitionId"] as Guid?);
    var curKey = (ViewData["curKey"] as string);
    var curOrgPassed = (ViewData["curOrg"] as OrganizationEnum?);
    // 0
    var byKeyAndOrg = Model;
    // 2
    var allConfigKeysBy = (ViewData["allConfigKeysBy"] as CompetitionVenueDisplayHelper);
    var allOrgs = (ViewData["allOrgs"] as List<OrganizationEnum>) ?? new List<OrganizationEnum>();
    // 4
    var compsById = (ViewData["compsById"] as Dictionary<Guid, Competition>) ?? new Dictionary<Guid, Competition>();
    var allCompIds = (ViewData["allCompIds"] as List<Guid>) ?? new List<Guid>();
    // 6
    var compClassesById = (ViewData["compClassesById"] as Dictionary<Guid, CompetitionClass>) ?? new Dictionary<Guid, CompetitionClass>();
    var allCompClassIds = (ViewData["allCompClassIds"] as List<Guid>) ?? new List<Guid>();
    // 8
    var compVenuesById = (ViewData["compVenuesById"] as Dictionary<Guid, CompetitionVenue>) ?? new Dictionary<Guid, CompetitionVenue>();
    var allCompVenueIds = (ViewData["allCompVenueIds"] as List<Guid>) ?? new List<Guid>();
    // 10
    var useAllOrgs = (ViewData["useAllOrgs"] as List<OrganizationEnum>) ?? new List<OrganizationEnum>();

    var useAllComps = allCompIds
        .Where(
            x => byKeyAndOrg.ContainsKey(x))
        .ToList();

    if (string.IsNullOrEmpty(curKey)
        || curOrgPassed == null
        //
        || allConfigKeysBy == null
        //
        || useAllComps.Count <= 0)
    {
        return;
    }

    var curOrg = curOrgPassed.Value;
}

@foreach (var curCompId in useAllComps)
{
    if (byKeyAndOrg.TryGetValue(
        curCompId,
        out var byKeyAndOrgAndCompId) == false)
    {
        continue;
    }

    compsById.TryGetValue(
        curCompId,
        out var curCompInfo);

    <table class="table table-striped table-hover table-bordered m-0 p-0 table-success"> <!-- SubByOrgAndComp start -->
        <thead>
            <tr>
                <th>
                    @(curCompInfo?.GetCompetitionName() ?? curCompId.ToString())
                </th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    @{
                        var curItem = allConfigKeysBy.Get(
                            curKey,
                            curOrg,
                            curCompId);

                        if (curItem != null)
                        {
                            @Html.EditorFor(
                                 m => curItem,
                                 new
                                 {
                                     OriginCompetitionId = originCompetitionId,
                                     CompetitionsById = compsById,
                                     CompetitionClassesById = compClassesById,
                                     CompetitionVenuesById = compVenuesById,
                                 })
                        }
                    }
                </td>

                @{
                    var useAllCompClasses = allCompClassIds
                        .Where(
                            x => byKeyAndOrgAndCompId.ContainsKey(x))
                        .ToList();

                    if (useAllCompClasses.Count >= 1)
                    {
                        <td class="align-bottom p-0"> <!-- SubByOrgAndComp - SubByOrgAndCompAndCompClass - start -->
                            @await Html.PartialAsync(
                                "SubByOrgAndCompAndCompClass",
                                byKeyAndOrgAndCompId,
                                new ViewDataDictionary(
                                    ViewData)
                                {
                                    { "curCompId", curCompId},
                                    // 10
                                    // ...                
                                    { "useAllComps", useAllComps },
                                    // 12
                                    { "useAllCompClasses", useAllCompClasses },
                                })
                        </td> <!-- SubByOrgAndComp - SubByOrgAndCompAndCompClass - end -->
                    }
                }
            </tr>
        </tbody>
    </table> <!-- SubByOrgAndComp end -->
}
