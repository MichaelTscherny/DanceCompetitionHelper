@using DanceCompetitionHelper.Database.Enum
@using DanceCompetitionHelper.Database.Extensions;
@using DanceCompetitionHelper.Database.Tables
@using DanceCompetitionHelper.Extensions
@using DanceCompetitionHelper.Web.Controllers
@using DanceCompetitionHelper.Web.Models.CompetitionClassModels;
@using DanceCompetitionHelper.Web.Extensions;
@using DanceCompetitionHelper.Web.Models.Configuration;

@model ConfigurationOverviewViewModel

@{
    var compInfo = Model.Competition;
    var compInfoStr = compInfo?.GetCompetitionName() ?? "Global";
    var competitionClassesCount = Model.OverviewItems?.Count() ?? 0;

    ViewData["Title"] = string.Format(
        compInfo != null
            ? "Configuration of Class {0}"
            : "{0} Configuration",
        compInfoStr);

    var allConfigScopes = new List<ConfigurationScopeEnum>(
        EnumExtensions
            .GetValues<ConfigurationScopeEnum>()
            .OrderBy(
                x => (int)x));
    var configKeysByScope = new Dictionary<string, Dictionary<ConfigurationScopeEnum, List<ConfigurationValue>>>();
    var compsById = Model.Competitions?.ToDictionary(
        x => x.CompetitionId,
        x => x)
        ?? new Dictionary<Guid, Competition>();
    var compClassesById = Model.CompetitionClasses?.ToDictionary(
        x => x.CompetitionClassId,
        x => x)
        ?? new Dictionary<Guid, CompetitionClass>();
    // ToDo: implement when "CompetitionVenue"s added...
    var compVenuesById = new Dictionary<Guid, CompetitionVenue>();

    foreach (var curItem in Model.OverviewItems ?? Enumerable.Empty<ConfigurationValue>())
    {
        if(curItem == null)
        {
            continue;
        }

        configKeysByScope.AddToBucket(
            curItem.Key,
            curItem.Scope,
            curItem);
    }
}

<div class="container text-center">
    <h1 class="display-6">@ViewData["Title"]</h1>

    @if (string.IsNullOrEmpty(Model.ErrorsChange) == false)
    {
        <div class="text-danger">
            @Model.ErrorsChange
        </div>
    }

    <div class="table-responsive-xxl">
        <table class="table table-striped table-hover .table-striped-columns">
            <thead>
                <tr role="rowheader">
                    <th>
                        Key
                    </th>
                    @foreach (var curScope in allConfigScopes)
                    {
                        <th>
                            @curScope
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var curKey in configKeysByScope.Keys
                    .OrderBy(
                        x => x))
                {
                    var itemScopes = configKeysByScope[curKey];

                    <tr role="row">
                        <td class="text-nowrap w-25 align-middle">
                            @Html.DisplayFor(modelItem => curKey)
                        </td>

                        @foreach (var curScope in allConfigScopes)
                        {
                            <td class="align-bottom">
                                @if (itemScopes.TryGetValue(
                                    curScope,
                                    out var item))
                                {
                                    @Html.EditorFor(
                                        m => item, 
                                        new 
                                        {
                                            OriginCompetitionId = Model.ConfigurationViewModel?.OriginCompetitionId,
                                            CompetitionsById = compsById,
                                            CompetitionClassesById = compClassesById,
                                            CompetitionVenuesById = compVenuesById,                                            
                                        })
                                }
                            </td>
                        }
                    </tr>
                }
            </tbody>
            <thead>
                <tr role="rowheader">
                    <th>
                        Key
                    </th>
                    @foreach (var curScope in allConfigScopes)
                    {
                        <th>
                            @curScope
                        </th>
                    }
                </tr>
            </thead>
        </table>
    </div>
</div>

<div class="container text-center" role="group">
    <form asp-action="@nameof(ConfigurationController.CreateNew)" method="post">
        <input id="@nameof(ConfigurationViewModel.OriginCompetitionId)"
               name="@nameof(ConfigurationViewModel.OriginCompetitionId)"
               type="hidden" 
               value="@compInfo?.CompetitionId"/>

        <div class="mb-3 text-start">
            <label for="@nameof(ConfigurationViewModel.Key)" 
                   class="form-label">New Configuration Value
            </label>
            <div class="input-group">
                <span class="input-group-text">Key</span>
                <input asp-for="Dummy" 
                       id="@nameof(ConfigurationViewModel.Key)"
                       name="@nameof(ConfigurationViewModel.Key)"
                       placeholder="For Key"
                       class="form-control" 
                       value="@(string.IsNullOrEmpty(Model.ErrorsAdd) ? string.Empty : Model.ConfigurationViewModel?.Key)"/>
                <span class="input-group-text">Org</span>
                @{
                    var isDisabled = (Model.AvailableOrganizations?.Count ?? 0) <= 1;
                }
                <select asp-for="Dummy"
                        id="@nameof(ConfigurationViewModel.Organization)"
                        name="@nameof(ConfigurationViewModel.Organization)"                        
                        asp-items="Model.AvailableOrganizations" 
                        class="form-control"
                        readonly="@isDisabled">
                </select>
                <span class="input-group-text">Comp</span>
                @{
                    isDisabled = (Model.AvailableCompetitions?.Count ?? 0) <= 1;
                }
                <select asp-for="Dummy"
                        id="@nameof(ConfigurationViewModel.CompetitionId)"
                        name="@nameof(ConfigurationViewModel.CompetitionId)"
                        asp-items="Model.AvailableCompetitions" 
                        class="form-control"
                        readonly="@isDisabled">
                </select>
                <span class="input-group-text">Class</span>
                @{
                    isDisabled = (Model.AvailableCompetitionClasses?.Count ?? 0) <= 1;
                }
                <select asp-for="Dummy"
                        id="@nameof(ConfigurationViewModel.CompetitionClassId)"
                        name="@nameof(ConfigurationViewModel.CompetitionClassId)"
                        asp-items="Model.AvailableCompetitionClasses" 
                        class="form-control"
                        readonly="@isDisabled">
                </select>
                <span class="input-group-text">Venues</span>
                @{
                    isDisabled = (Model.AvailableCompetitionVenues?.Count ?? 0) <= 1;
                }
                <select asp-for="Dummy"
                        id="@nameof(ConfigurationViewModel.CompetitionVenueId)"
                        name="@nameof(ConfigurationViewModel.CompetitionVenueId)"
                        asp-items="Model.AvailableCompetitionVenues" 
                        class="form-control"
                        readonly="@isDisabled">
                </select>
                <span class="input-group-text">Value</span>
                <input asp-for="Dummy"
                       id="@nameof(ConfigurationViewModel.Value)"
                       name="@nameof(ConfigurationViewModel.Value)"
                       placeholder="Use Value"
                       class="form-control" 
                       value="@(string.IsNullOrEmpty(Model.ErrorsAdd) ? string.Empty : Model.ConfigurationViewModel?.Value)"/>
                <button type="submit"
                       value="Create"
                       class="btn btn-outline-success bi bi-floppy" />
            </div>
            @if (string.IsNullOrEmpty(Model.ErrorsAdd) == false)
            {
                <div class="text-danger">
                    @Model.ErrorsAdd
                </div>
            }
        </div>
    </form>
    <br />
</div>
