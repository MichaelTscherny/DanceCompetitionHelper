@using DanceCompetitionHelper.Database.Enum
@using DanceCompetitionHelper.Database.Tables
@using DanceCompetitionHelper.Database.Extensions
@using DanceCompetitionHelper.Web.Controllers
@using DanceCompetitionHelper.Web.Models.Configuration

@model ConfigurationValue 

@{
    var cfgVal = Model; //.ConfigurationValue;
    var useOriginCompetitionId = (ViewData["OriginCompetitionId"] as Guid?);

    var compsById = (ViewData["CompetitionsById"] as Dictionary<Guid, Competition>) ?? new Dictionary<Guid, Competition>();
    var compClassesById = (ViewData["CompetitionClassesById"] as Dictionary<Guid, CompetitionClass>) ?? new Dictionary<Guid, CompetitionClass>();
    var compVenuesById = (ViewData["CompetitionVenuesById"] as Dictionary<Guid, CompetitionVenue>) ?? new Dictionary<Guid, CompetitionVenue>();
}

<div role="group">
    <form asp-action="@nameof(ConfigurationController.Edit)" method="post">
        <input id="@nameof(ConfigurationViewModel.OriginCompetitionId)"
               name="@nameof(ConfigurationViewModel.OriginCompetitionId)"
               type="hidden"
               value="@useOriginCompetitionId" />
        <input id="@nameof(ConfigurationViewModel.Organization)"
               name="@nameof(ConfigurationViewModel.Organization)"
               type="hidden"
               value="@cfgVal.Organization" />
        <input id="@nameof(ConfigurationViewModel.CompetitionId)"
               name="@nameof(ConfigurationViewModel.CompetitionId)"
               type="hidden"
               value="@cfgVal.CompetitionId" />
        <input id="@nameof(ConfigurationViewModel.CompetitionClassId)"
               name="@nameof(ConfigurationViewModel.CompetitionClassId)"
               type="hidden"
               value="@cfgVal.CompetitionClassId" />
        <input id="@nameof(ConfigurationViewModel.CompetitionVenueId)"
               name="@nameof(ConfigurationViewModel.CompetitionVenueId)"
               type="hidden"
               value="@cfgVal.CompetitionVenueId" />
        <input id="@nameof(ConfigurationViewModel.Key)"
               name="@nameof(ConfigurationViewModel.Key)"
               type="hidden"
               value="@cfgVal.Key" />

        @{
            var extraInfo = string.Empty;
            var extraInfos = new List<string>();

            if (cfgVal.Organization != OrganizationEnum.Any)
            {
                extraInfos.Add(
                    cfgVal.Organization.ToString());
            }

            if (cfgVal.CompetitionId != Guid.Empty)
            {
                if (compsById?.TryGetValue(
                        cfgVal.CompetitionId,
                    out var foundComp) == true)
                {                        
                    extraInfos.Add(
                        foundComp.GetCompetitionName());
                }
                else
                {
                    extraInfos.Add(
                        cfgVal.CompetitionId.ToString());
                }
            }

            if (cfgVal.CompetitionClassId != Guid.Empty)
            {
                if (compClassesById?.TryGetValue(
                    cfgVal.CompetitionClassId,
                    out var foundCompClass) == true)
                {                        
                    extraInfos.Add(
                        foundCompClass.GetCompetitionClassName());
                }
                else
                {
                    extraInfos.Add(
                    cfgVal.CompetitionClassId.ToString());
                }
            }

            if (cfgVal.CompetitionVenueId != Guid.Empty)
            {
                if (compVenuesById?.TryGetValue(
                    cfgVal.CompetitionVenueId,
                    out var foundVenues) == true)
                {                        
                    extraInfos.Add(
                        foundVenues.Name);
                }
                else
                {
                    extraInfos.Add(
                        cfgVal.CompetitionVenueId.ToString());
                }
            }

            extraInfo = string.Join(
                "<br/>",
                // "/",
                extraInfos);
        }

        @if (string.IsNullOrEmpty(extraInfo) == false)
        {
            <label for="@nameof(ConfigurationViewModel.Value)" class="form-label">
                @Html.Raw(extraInfo)
            </label>

            @*
            <span for="@nameof(ConfigurationViewModel.Value)" class="input-group-text">
                @Html.Raw(extraInfo)
            </span>
            *@
        }

        @*
        @if(Model.Organization != OrganizationEnum.Any)
        {
            <span for="@nameof(ConfigurationViewModel.Value)" class="input-group-text">
                @Model.Organization
            </span>
        }
        *@

        <div class="input-group mw-100">
            <input id="@nameof(ConfigurationViewModel.Value)"
                    name="@nameof(ConfigurationViewModel.Value)"
                   value="@cfgVal.Value"
                    placeholder="Use Value"
                    class="form-control" />

            <button type="submit"
                    value="edit"
                    asp-action="@nameof(ConfigurationController.Edit)"
                    class="btn btn-outline-success bi bi-floppy" />
            <button type="submit"
                    value="delete"
                    asp-action="@nameof(ConfigurationController.Delete)"
                    class="btn btn-outline-danger bi bi-trash" />
        </div>
    </form>
</div>