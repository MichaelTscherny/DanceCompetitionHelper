@using DanceCompetitionHelper.Database.DisplayInfo;
@using DanceCompetitionHelper.Database.Extensions;
@using DanceCompetitionHelper.Database.Tables;
@using DanceCompetitionHelper.Extensions;
@using DanceCompetitionHelper.Web.Controllers;
@using DanceCompetitionHelper.Web.Enums
@using DanceCompetitionHelper.Web.Extensions;
@using DanceCompetitionHelper.Web.Models.CompetitionClassModels;
@using DanceCompetitionHelper.Web.Models.Pdfs

@model ShowPossiblePromotionsViewModel

@{
    var compInfo = Model.Competition;
    var compInfoStr = compInfo.GetCompetitionName();
    var possiblePromotionsCount = Model.OverviewItems?.Count() ?? 0;

    ViewData["Title"] = string.Format(
        "{0} Possible Promotions",
        possiblePromotionsCount,
        compInfoStr);

    var (helpIncludedClasses, maxDisplayClasses) = ViewModelExtensions
        .ExtractPossiblePromotionCompetitionClasses(
            Model.OverviewItems);    
    var displayInfoCompClasses = ViewModelExtensions.ExtractDisplayInfo(
        helpIncludedClasses,
        GroupForViewEnum.None)
        .FirstOrDefault()
        ?? new List<(string ClassName, Guid ClassId, bool Ignore)>(); 
    var displayInfoCompClassesIds = new List<Guid>(
        displayInfoCompClasses.Select(
            x => x.ClassId));

    var emptyHelper = "&nbsp;";
    var columnWith = 100 / (maxDisplayClasses + 1);
    var partInfoByCompetitionClass = new Dictionary<Guid, Dictionary<Guid, Participant>>();

    // helper to get the correct start number for a competition class
    foreach(var curMiltiStarter in Model.MultipleStarters ?? Enumerable.Empty<MultipleStarter>())
    {
        foreach (var curPart in curMiltiStarter.Participants)
        {
            var usePartId = curPart.ParticipantId;
            if (partInfoByCompetitionClass.TryGetValue(
                usePartId,
                out var byClassId) == false)
            {
                byClassId = new Dictionary<Guid, Participant>();
                partInfoByCompetitionClass[usePartId] = byClassId;
            }

            foreach (var curPartClassInfos in curMiltiStarter.Participants)
            {
                byClassId[curPartClassInfos.CompetitionClassId] = curPartClassInfos;
            }
        }
    }
}

<div class="text-center">
    <h1 class="display-6">@ViewData["Title"]</h1>

    @foreach (var curPossPromotion in Model.OverviewItems ?? Enumerable.Empty<Participant>())
    {
        <div class="table-responsive-xxl">
            @{
                var curClassesByClassId = curPossPromotion.DisplayInfo?.PromotionInfo?.IncludedCompetitionClasses
                    .ToDictionary(
                        x => x.CompetitionClassId) 
                        ?? new Dictionary<Guid, CompetitionClass>();
            }
            <table class="table table-striped table-hover table-striped-columns">
                <thead>
                    <tr>
                        <th style="width: @columnWith%">
                            Name
                        </th>

                        @{
                            var displayedColumns = 0;
                        }
                        @foreach (var curClassId in displayInfoCompClassesIds)
                        {
                            if (curClassesByClassId.TryGetValue(
                                curClassId,
                                out var curClass))
                            {
                                displayedColumns++;
                                <th style="width: @columnWith%">
                                    @{
                                        var infoString = string.Empty;

                                        if (curClass?.Ignore ?? false)
                                        {
                                            infoString = "[IGNORE!]";
                                        }
                                    }

                                    @curClass.GetCompetitionClassName() @infoString
                                </th>
                            }
                        }

                        @for (var leftColumns = displayedColumns; leftColumns < maxDisplayClasses; leftColumns++)
                        {
                            <th style="width: @columnWith%">
                                @Html.Raw(emptyHelper)
                            </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @{
                        var extraTrClass = string.Empty;
                        var isAlreadyPromoted = curPossPromotion.DisplayInfo?.PromotionInfo?.AlreadyPromoted ?? false;

                        if (isAlreadyPromoted)
                        {
                            extraTrClass = "table-danger";
                        }
                    }

                    <tr class="@extraTrClass">
                        <td class="text-nowrap">
                            @(curPossPromotion.GetNames())
                            (<a asp-controller="@ParticipantController.RefName"
                            asp-action="@nameof(ParticipantController.ShowEdit)"
                            asp-route-id="@curPossPromotion.ParticipantId">Edit</a>)
                        </td>

                        @{
                            displayedColumns = 0;
                            var useStartNumber = -1;
                        }
                        @foreach (var curClassId in displayInfoCompClassesIds)
                        {
                            if (curClassesByClassId.TryGetValue(
                                curClassId,
                                out var curClass))
                            {
                                if (partInfoByCompetitionClass.TryGetValue(
                                    curPossPromotion.ParticipantId,
                                    out var compClassesByPartId))
                                {
                                    if (compClassesByPartId.TryGetValue(
                                        curClassId,
                                        out var foundPart))
                                    {
                                        useStartNumber = foundPart.StartNumber;
                                    }
                                }
                                else
                                {
                                    if(curClassId == curPossPromotion.CompetitionClassId)
                                    {
                                        useStartNumber = curPossPromotion.StartNumber;
                                    }
                                }

                                displayedColumns++;

                                var curClassPointsInfo = "-";
                                if (curClass.CompetitionClassId == curPossPromotion.CompetitionClassId)
                                {
                                    curClassPointsInfo = string.Format(
                                        "{0} / {1}",
                                        curClass.MinPointsForPromotion,
                                        curClass.MinStartsForPromotion);
                                }

                                <td>
                                    @curClassPointsInfo<br>
                                    #@useStartNumber
                                    : +@curClass.PointsForFirst / +1
                                </td>
                            }
                        }

                        @for (var leftColumns = displayedColumns; leftColumns < maxDisplayClasses; leftColumns++)
                        {
                            <td>
                                @Html.Raw(emptyHelper)
                            </td>
                        }
                    </tr>
                    <tr>
                        <td class="text-nowrap">
                            A: @curPossPromotion.OrgPointsPartA
                            / @curPossPromotion.OrgStartsPartA
                        </td>

                        @{
                            displayedColumns = 0;
                        }
                        @foreach (var curClassId in displayInfoCompClassesIds)
                        {
                            if (curClassesByClassId.TryGetValue(
                                curClassId,
                                out var curClass))
                            {
                                displayedColumns++;

                                <td>
                                    /
                                </td>
                            }
                        }

                        @for (var leftColumns = displayedColumns; leftColumns < maxDisplayClasses; leftColumns++)
                        {
                            <td>
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            </td>
                        }
                    </tr>
                    @if (curPossPromotion.OrgPointsPartB.HasValue)
                    {
                        <tr>
                            <td class="text-nowrap">
                                B: @curPossPromotion.OrgPointsPartB
                                / @curPossPromotion.OrgStartsPartB
                            </td>

                            @{
                                displayedColumns = 0;
                            }
                            @foreach (var curClassId in displayInfoCompClassesIds)
                            {
                                if (curClassesByClassId.TryGetValue(
                                    curClassId,
                                    out var curClass))
                                {
                                    displayedColumns++;

                                    <td>
                                        /
                                    </td>
                                }
                            }

                            @for (var leftColumns = displayedColumns; leftColumns < maxDisplayClasses; leftColumns++)
                            {
                                <td>
                                    @Html.Raw(emptyHelper)
                                </td>
                            }
                        </tr>
                    }
                </tbody>
                <!-- NO <tfoot> ON PURPOSE! -->
            </table>
        </div>
    }

    <div class="row d-flex justify-content-center py-1">
        <div class="col">
            <a asp-controller="@CompetitionClassController.RefName"
            asp-action="@nameof(CompetitionClassController.Index)"
            asp-route-id="@Model.Competition?.CompetitionId"
            class="btn btn-secondary px-lg-4 bi bi-box-arrow-in-left"
            title="Back">
                Back
            </a>
        </div>
    </div>
</div>

@{
    var toDisplay = new PdfViewModelWrapper()
    {
        AspController = CompetitionClassController.RefName,
        AspAction = nameof(CompetitionClassController.PdfPossiblePromotions),
        ButtonText = "Possible Promotions",
        // 
        PdfViewModel = new PdfViewModel()
        {
            CompetitionId = Model.Competition?.CompetitionId,
        }
    };
}
@Html.DisplayFor(
    m => toDisplay)
