using DanceCompetitionHelper.Data;
using DanceCompetitionHelper.Database;
using DanceCompetitionHelper.Database.DisplayInfo;
using DanceCompetitionHelper.Database.Enum;
using DanceCompetitionHelper.Database.Tables;

namespace DanceCompetitionHelper
{
    public interface IDanceCompetitionHelper : IDisposable
    {
        #region Administration stuff

        DanceCompetitionHelperDbContext GetDbCtx();
        void AddTestData();
        void Migrate();
        void CheckMandatoryConfiguration();
        void CreateTableHistory(
            Guid competitionId,
            string comment = "Generated by User",
            bool useTransaction = true);

        #endregion // Administration stuff

        IEnumerable<Competition> GetCompetitions(
            bool includeInfos = false,
            bool useTransaction = true);
        IEnumerable<CompetitionClass> GetCompetitionClasses(
            Guid? competitionId,
            bool includeInfos = false,
            bool showAll = false,
            bool useTransaction = true);
        IEnumerable<Participant> GetParticipants(
            Guid? competitionId,
            Guid? competitionClassId,
            bool includeInfos = false,
            bool showAll = false,
            bool useTransaction = true);
        IEnumerable<AdjudicatorPanel> GetAdjudicatorPanels(
            Guid? competitionId,
            bool includeInfos = false,
            bool useTransaction = true);
        IEnumerable<Adjudicator> GetAdjudicators(
            Guid? competitionId,
            Guid? adjudicatorPanelId,
            bool includeInfos = false,
            bool useTransaction = true);

        Competition? GetCompetition(
            Guid? competitionId,
            bool useTransaction = true);

        Guid? FindCompetition(
            Guid? byAnyId,
            bool useTransaction = true);
        Guid? FindCompetitionClass(
            Guid? byAnyId,
            bool useTransaction = true);
        Guid? GetCompetition(
            string byName,
            bool useTransaction = true);
        Guid? GetCompetitionClass(
            string byName,
            bool useTransaction = true);
        CompetitionClass? GetCompetitionClass(
            Guid competitionClassId,
            bool useTransaction = true);

        Participant? GetParticipant(
            Guid participantId,
            bool useTransaction = true);

        AdjudicatorPanel? GetAdjudicatorPanel(
            Guid adjudicatorPanelId,
            bool useTransaction = true);

        Adjudicator? GetAdjudicator(
            Guid adjudicatorId,
            bool useTransaction = true);

        IEnumerable<MultipleStarter> GetMultipleStarter(
            Guid competitionId,
            bool useTransaction = true);

        #region Competition Crud

        void CreateCompetition(
            string competitionName,
            OrganizationEnum organization,
            string orgCompetitionId,
            string? competitionInfo,
            DateTime competitionDate,
            string? comment);

        void EditCompetition(
            Guid competitionId,
            string competitionName,
            OrganizationEnum organization,
            string orgCompetitionId,
            string? competitionInfo,
            DateTime competitionDate,
            string? comment);

        void RemoveCompetition(
            Guid competitionId);

        #endregion //  Competition Crud

        #region AdjudicatorPanel Crud

        void CreateAdjudicatorPanel(
            Guid competitionId,
            string name,
            string? comment);

        void EditAdjudicatorPanel(
            Guid adjudicatorPanelId,
            Guid competitionId,
            string name,
            string? comment);

        void RemoveAdjudicatorPanel(
            Guid adjudicatorPanelId);

        #endregion //  AdjudicatorPanel Crud

        #region Adjudicator Crud

        void CreateAdjudicator(
            Guid adjudicatorPanelId,
            string abbreviation,
            string name,
            string? comment);

        void EditAdjudicator(
            Guid adjudicatorId,
            Guid adjudicatorPanelId,
            string abbreviation,
            string name,
            string? comment);

        void RemoveAdjudicator(
            Guid adjudicatorId);

        #endregion //  Adjudicator Crud

        #region CompetitionClass Crud

        void CreateCompetitionClass(
            Guid competitionId,
            string competitionClassName,
            Guid? followUpCompetitionClassId,
            Guid adjudicatorPanelId,
            string orgClassId,
            string? discipline,
            string? ageClass,
            string? ageGroup,
            string? className,
            int minStartsForPromotion,
            double minPointsForPromotion,
            double pointsForFirts,
            int extraManualStarter,
            string? comment,
            bool ignore,
            string? competitionColor);

        void EditCompetitionClass(
            Guid competitionClassId,
            string competitionClassName,
            Guid? followUpCompetitionClassId,
            Guid adjudicatorPanelId,
            string orgClassId,
            string? discipline,
            string? ageClass,
            string? ageGroup,
            string? className,
            int minStartsForPromotion,
            double minPointsForPromotion,
            double pointsForFirst,
            int extraManualStarter,
            string? comment,
            bool ignore,
            string? competitionColor);

        void RemoveCompetitionClass(
            Guid competitionClassId);

        #endregion //  CompetitionClass Crud 

        #region Participant Crud

        void CreateParticipant(
            Guid competitionId,
            Guid competitionClassId,
            int startNumber,
            string namePartA,
            string? orgIdPartA,
            string? namePartB,
            string? orgIdPartB,
            string? clubName,
            string? orgIdClub,
            double orgPointsPartA,
            int orgStartsPartA,
            int? minStartsForPromotionPartA,
            bool? orgAlreadyPromotedPartA,
            string? OrgAlreadyPromotedInfoPartA,
            double? orgPointsPartB,
            int? orgStartsPartB,
            int? minStartsForPromotionPartB,
            bool? orgAlreadyPromotedPartB,
            string? OrgAlreadyPromotedInfoPartB,
            string? comment,
            bool ignore);

        void EditParticipant(
            Guid participantId,
            Guid competitionClassId,
            int startNumber,
            string namePartA,
            string? orgIdPartA,
            string? namePartB,
            string? orgIdPartB,
            string? clubName,
            string? orgIdClub,
            double orgPointsPartA,
            int orgStartsPartA,
            int? minStartsForPromotionPartA,
            bool? orgAlreadyPromotedPartA,
            string? OrgAlreadyPromotedInfoPartA,
            double? orgPointsPartB,
            int? orgStartsPartB,
            int? minStartsForPromotionPartB,
            bool? orgAlreadyPromotedPartB,
            string? OrgAlreadyPromotedInfoPartB,
            string? comment,
            bool ignore);

        void RemoveParticipant(
            Guid participantId);

        #endregion //  CompetitionClass Crud

        #region Configuration

        ConfigurationValue? GetConfiguration(
            string key,
            bool useTransaction = true);

        ConfigurationValue? GetConfiguration(
            string key,
            OrganizationEnum organization,
            bool useTransaction = true);

        ConfigurationValue? GetConfiguration(
            string key,
            Competition? competition,
            bool useTransaction = true);

        ConfigurationValue? GetConfiguration(
            string key,
            CompetitionClass? competitionClass,
            bool useTransaction = true);

        public ConfigurationValue? GetConfiguration(
            string key,
            CompetitionClass? competitionClass,
            CompetitionVenue? competitionVenue,
            bool useTransaction = true);

        public ConfigurationValue? GetConfiguration(
            ConfigurationValue? cfgValue,
            bool useTransaction = true);

        #endregion Configuration

        #region Importer

        ImportOrUpdateCompetitionStatus ImportOrUpdateCompetition(
            OrganizationEnum Organization,
            string? OrgCompetitionId,
            ImportTypeEnum ImportType,
            IEnumerable<string>? filePaths,
            Dictionary<string, string>? parameters = null);

        #endregion // Importer

    }
}
