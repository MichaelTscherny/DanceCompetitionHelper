using DanceCompetitionHelper.Data;
using DanceCompetitionHelper.Database;
using DanceCompetitionHelper.Database.DisplayInfo;
using DanceCompetitionHelper.Database.Enum;
using DanceCompetitionHelper.Database.Extensions;
using DanceCompetitionHelper.Database.Tables;
using DanceCompetitionHelper.Extensions;
using DanceCompetitionHelper.Helper;
using DanceCompetitionHelper.OrgImpl;
using DanceCompetitionHelper.OrgImpl.Oetsv;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;

namespace DanceCompetitionHelper
{
    public class DanceCompetitionHelper : IDanceCompetitionHelper
    {
        private readonly DanceCompetitionHelperDbContext _danceCompHelperDb;
        private readonly ILogger<DanceCompetitionHelperDbContext> _logger;
        private readonly IServiceProvider _serviceProvider;

        public DanceCompetitionHelper(
            DanceCompetitionHelperDbContext danceCompHelperDb,
            ILogger<DanceCompetitionHelperDbContext> logger,
            IServiceProvider serviceProvider)
        {
            _danceCompHelperDb = danceCompHelperDb
                ?? throw new ArgumentNullException(
                    nameof(danceCompHelperDb));
            _logger = logger
                ?? throw new ArgumentNullException(
                    nameof(logger));
            _serviceProvider = serviceProvider
                ?? throw new ArgumentNullException(
                    nameof(serviceProvider));
        }

        #region Administration stuff

        public DanceCompetitionHelperDbContext GetDbCtx()
        {
            return _danceCompHelperDb;
        }

        public void AddTestData()
        {
            _logger.LogDebug(
                "Do '{Method}'",
                nameof(AddTestData));

            _danceCompHelperDb.AddTestData();
        }

        public void Migrate()
        {
            _logger.LogDebug(
                "Do '{Method}'",
                nameof(Migrate));

            _danceCompHelperDb.Migrate();
        }

        public void CreateTableHistory(
            Guid competitionId,
            string comment = "Generated by User",
            bool useTransaction = true)
        {
            using var dbTrans = _danceCompHelperDb.BeginTransaction(
                useTransaction);

            try
            {
                var foundComp = GetCompetition(
                    competitionId,
                    false);
                /*
                _danceCompHelperDb.Competitions
                    .TagWith(
                        nameof(CreateTableHistory) + "(Guid)[0]")
                    .FirstOrDefault(
                        x => x.CompetitionId == competitionId);
                */

                if (foundComp == null)
                {
                    _logger.LogWarning(
                        "{Competition} with {CompetitionIdName} '{CompetitionId}' unknown. Do not generate any History",
                        nameof(Competition),
                        nameof(Competition.CompetitionId),
                        competitionId);

                    return;
                }

                var tableHistCreator = _serviceProvider.GetRequiredService<TableHistoryCreator>();

                tableHistCreator.CreateHistory(
                    _danceCompHelperDb,
                    foundComp.CompetitionId,
                    comment);

                if (dbTrans != null)
                {
                    _danceCompHelperDb.SaveChanges();
                    dbTrans.Commit();
                }
            }
            catch (Exception exc)
            {
                _logger.LogError(
                    exc,
                    "{Method} failed: {ErrorMessage}",
                    nameof(CreateTableHistory),
                    exc.Message);

                dbTrans?.Rollback();
            }
        }

        #endregion // Administration stuff

        public Competition? GetCompetition(
            Guid? competitionId,
            bool useTransaction = true)
        {
            if (competitionId == null)
            {
                return null;
            }

            using var dbTrans = _danceCompHelperDb.BeginTransaction(
                useTransaction);

            try
            {
                return _danceCompHelperDb.Competitions
                    .TagWith(
                        nameof(GetCompetition) + "(Guid)[0]")
                    .FirstOrDefault(
                        x => x.CompetitionId == competitionId);
            }
            finally
            {
                dbTrans?.Rollback();
            }
        }

        public IEnumerable<Competition> GetCompetitions(
            bool includeInfos = false,
            bool useTransaction = true)
        {
            using var dbTrans = _danceCompHelperDb.BeginTransaction(
                useTransaction);

            var countsOfCompClasses = new Dictionary<Guid, int>();
            var countsOfParticipants = new Dictionary<Guid, int>();

            try
            {
                if (includeInfos)
                {
                    countsOfCompClasses = _danceCompHelperDb.CompetitionClasses
                        .TagWith(
                            nameof(GetCompetitions) + "(bool?)[0]")
                        .Include(
                            x => x.AdjudicatorPanel)
                        .Where(
                            x => x.Ignore == false)
                        .GroupBy(
                            x => x.CompetitionId,
                            (compId, items) => new
                            {
                                CompetitionId = compId,
                                Count = items.Count(),
                            })
                        .ToDictionary(
                            x => x.CompetitionId,
                            x => x.Count);

                    countsOfParticipants = _danceCompHelperDb.Participants
                        .TagWith(
                            nameof(GetCompetitions) + "(bool?)[1]")
                        .Where(
                            x => x.Ignore == false)
                        .GroupBy(
                            x => x.CompetitionId,
                            (compId, items) => new
                            {
                                CompetitionId = compId,
                                Count = items.Count(),
                            })
                        .ToDictionary(
                            x => x.CompetitionId,
                            x => x.Count);
                }

                foreach (var curComp in _danceCompHelperDb.Competitions
                    .TagWith(
                        nameof(GetCompetitions) + "(bool?)[2]")
                    .OrderByDescending(
                        x => x.CompetitionDate)
                    .ThenBy(
                        x => x.OrgCompetitionId))
                {
                    if (includeInfos)
                    {
                        // CAUTION: EF is caching, if we dont want wrong values
                        // we need to recreate this!..
                        curComp.DisplayInfo = new CompetitionDisplayInfo();

                        var useDisplayInfo = curComp.DisplayInfo;

                        if (countsOfCompClasses.TryGetValue(
                            curComp.CompetitionId,
                            out var countCompClasses))
                        {
                            useDisplayInfo.CountCompetitionClasses = countCompClasses;
                        }

                        if (countsOfParticipants.TryGetValue(
                            curComp.CompetitionId,
                            out var countParticipants))
                        {
                            useDisplayInfo.CountParticipants = countParticipants;
                        }

                        useDisplayInfo.CountMultipleStarters = GetMultipleStarter(
                            curComp.CompetitionId,
                            false)
                            .Count();
                        useDisplayInfo.CountAdjudicatorPanels = _danceCompHelperDb.AdjudicatorPanels
                            .TagWith(
                                nameof(GetCompetitions) + " " + nameof(Adjudicator) + ".Count")
                            .Count(
                                x => x.CompetitionId == curComp.CompetitionId);

                        var helpAllItems = _danceCompHelperDb.TableVersionInfos
                            .TagWith(
                                nameof(GetCompetitions) + " " + nameof(TableVersionInfo) + ".Count")
                            .Where(
                                x => x.CompetitionId == curComp.CompetitionId)
                            .Select(
                                x => x.CurrentVersion)
                            .ToList();

                        if (helpAllItems.Count >= 1)
                        {
                            useDisplayInfo.CountVersions = helpAllItems.Max();
                        }
                    }

                    yield return curComp;
                }
            }
            finally
            {
                dbTrans?.Rollback();
            }
        }

        public IEnumerable<CompetitionClass> GetCompetitionClasses(
            Guid? competitionId,
            bool includeInfos = false,
            bool showAll = false,
            bool useTransaction = true)
        {
            if (competitionId == null)
            {
                yield break;
            }

            using var dbTrans = _danceCompHelperDb.BeginTransaction(
                useTransaction);

            try
            {
                var foundComp = GetCompetition(
                    competitionId,
                    false);

                if (foundComp == null)
                {
                    yield break;
                }

                var partsByCompClass = new Dictionary<Guid, List<Participant>>();
                var multiStartsByCompClass = new Dictionary<Guid, List<Participant>>();

                ICompetitonClassChecker? compClassChecker = GetCompetitonClassChecker(
                    foundComp);
                var higherClassificationsByLowerCompClassId = new Dictionary<Guid, CompetitionClass>();
                var foundPromotionFromCompClass = new Dictionary<Guid, List<Participant>>();

                var getAllCompClasses = _danceCompHelperDb.CompetitionClasses
                    .TagWith(
                        nameof(GetCompetitionClasses) + "(Guid?)[2]")
                    .Include(
                        x => x.AdjudicatorPanel)
                    .Where(
                        x => x.CompetitionId == foundComp.CompetitionId)
                    .OrderBy(
                        x => x.OrgClassId)
                    .ThenBy(
                        x => x.CompetitionClassName);

                var allCompetitionClasses = showAll
                    ? getAllCompClasses.ToList()
                    : getAllCompClasses
                        .Where(
                            x => x.Ignore == false)
                        .ToList();

                // cleanup "PreviousCompetitionClass"
                foreach (var curCompClass in allCompetitionClasses)
                {
                    curCompClass.PreviousCompetitionClass = null;
                }

                // collect "higher classes"...
                foreach (var curCompClass in allCompetitionClasses)
                {
                    var useFollowUpComp = curCompClass.FollowUpCompetitionClass;
                    if (useFollowUpComp == null)
                    {
                        continue;
                    }

                    useFollowUpComp.PreviousCompetitionClass = curCompClass;

                    higherClassificationsByLowerCompClassId[curCompClass.CompetitionClassId]
                        = useFollowUpComp;
                }

                if (includeInfos)
                {
                    foreach (var curPart in GetParticipants(
                            foundComp.CompetitionId,
                            null,
                            true,
                            useTransaction: false)
                        .AsQueryable()
                        .OrderBy(
                            x => x.CompetitionId)
                        .ThenByDefault())
                    {
                        partsByCompClass.AddToBucket(
                            curPart.CompetitionClassId,
                            curPart);

                        var usePromotionInfo = curPart.DisplayInfo?.PromotionInfo;
                        if (usePromotionInfo != null)
                        {
                            if (usePromotionInfo.PossiblePromotionA
                                || (usePromotionInfo.PossiblePromotionB ?? false))
                            {
                                if (higherClassificationsByLowerCompClassId.TryGetValue(
                                    curPart.CompetitionClassId,
                                    out var foundHigherClasses))
                                {
                                    foundPromotionFromCompClass.AddToBucket(
                                        foundHigherClasses.CompetitionClassId,
                                        curPart);
                                }
                            }
                        }
                    }

                    var multipleStarters = GetMultipleStarter(
                        competitionId.Value,
                        false)
                        .ToList();

                    foreach (var curMultiStart in multipleStarters)
                    {
                        foreach (var multiCompClasss in curMultiStart.CompetitionClasses)
                        {
                            foreach (var multiPart in curMultiStart.Participants
                                .Where(
                                    x => x.CompetitionClassId == multiCompClasss.CompetitionClassId))
                            {
                                multiStartsByCompClass.AddToBucket(
                                    multiCompClasss.CompetitionClassId,
                                    multiPart,
                                    true);
                            }
                        }
                    }
                }

                // fill "displayInfo"...
                foreach (var curCompClass in allCompetitionClasses)
                {
                    if (includeInfos)
                    {
                        // CAUTION: EF is caching, if we dont want wrong values
                        // we need to re-create this!..
                        curCompClass.DisplayInfo = new CompetitionClassDisplayInfo();

                        var useDisplayInfo = curCompClass.DisplayInfo;
                        var useExtraPart = useDisplayInfo.ExtraParticipants;
                        var useCompClassId = curCompClass.CompetitionClassId;

                        if (partsByCompClass.TryGetValue(
                            useCompClassId,
                            out var participants))
                        {
                            curCompClass.DisplayInfo.Participants.AddRange(
                                participants);
                        }

                        multiStartsByCompClass.TryGetValue(
                            useCompClassId,
                            out var curCntMultiStarter);
                        useDisplayInfo.CountMultipleStarters = curCntMultiStarter?.Count ?? 0;
                        useDisplayInfo.CountMultipleStartersInfo = curCntMultiStarter.GetStartNumber();
                    }
                }

                // fill "Extra Part"...
                foreach (var curCompClass in allCompetitionClasses)
                {
                    var useDisplayInfo = curCompClass.DisplayInfo;

                    if (useDisplayInfo != null
                        && includeInfos)
                    {
                        var useExtraPart = useDisplayInfo.ExtraParticipants;
                        var useCompClassId = curCompClass.CompetitionClassId;
                        var validClasses = new List<CompetitionClass>();

                        var usePrevCompClass = curCompClass.PreviousCompetitionClass;
                        if (usePrevCompClass != null
                            /* TODO: filter her?..
                            && usePrevCompClass.Ignore == false
                            */)
                        {
                            // --- BY WINNING ---
                            // TODO: filter her?.. ?? only if we got a "running comp"...
                            if (usePrevCompClass.DisplayInfo?.Participants.Count >= 1)
                            {
                                validClasses.Add(
                                    usePrevCompClass);
                            }

                            useExtraPart.ByWinning += validClasses.Count;
                            useExtraPart.ByWinningInfo += validClasses.GetCompetitionClasseNames();

                            // --- BY PROMOTION ---
                            if (foundPromotionFromCompClass.TryGetValue(
                                useCompClassId,
                                out var possiblePromotions))
                            {
                                useExtraPart.ByPromotion += possiblePromotions.Count;
                                useExtraPart.ByPromotionInfo += possiblePromotions.GetStartNumber();
                            }
                        }
                    }

                    yield return curCompClass;
                }
            }
            finally
            {
                dbTrans?.Rollback();
            }
        }

        public IEnumerable<Participant> GetParticipants(
            Guid? competitionId,
            Guid? competitionClassId,
            bool includeInfos = false,
            bool showAll = false,
            bool useTransaction = true)
        {
            if (competitionId == null)
            {
                yield break;
            }

            using var dbTrans = _danceCompHelperDb.BeginTransaction(
                useTransaction);

            try
            {
                var foundComp = GetCompetition(
                    competitionId,
                    false);

                if (foundComp == null)
                {
                    yield break;
                }

                // we do only basic info..
                var foundCompClass = _danceCompHelperDb.CompetitionClasses
                    .TagWith(
                        nameof(GetParticipants) + "(Guid?, Guid?, bool)[1]")
                    .FirstOrDefault(
                        x => x.CompetitionId == competitionId
                        && x.CompetitionClassId == competitionClassId);

                var multiStarter = new List<MultipleStarter>();
                var multiStarterByParticipantsId = new Dictionary<Guid, List<CompetitionClass>>();
                var allCompClasses = new List<CompetitionClass>();
                IParticipantChecker? participantChecker = null;

                if (includeInfos)
                {
                    allCompClasses.AddRange(
                        // we only need basic infos here...
                        _danceCompHelperDb.CompetitionClasses
                            .TagWith(
                                nameof(GetParticipants) + "(Guid?, Guid?, bool)[1]")
                            .Where(
                                x => x.CompetitionId == competitionId));

                    multiStarter.AddRange(
                        GetMultipleStarter(
                            foundComp.CompetitionId,
                            false));

                    multiStarterByParticipantsId =
                        multiStarter.SelectMany(
                            x => x.GetCompetitionClassesOfParticipants())
                        .ToDictionary(
                            x => x.ParticipantId,
                            x => x.CompetitionClass);

                    participantChecker = GetParticipantChecker(
                        foundComp);

                    if (participantChecker != null)
                    {
                        participantChecker.SetCompetitionClasses(
                            allCompClasses);
                        participantChecker.SetMultipleStarter(
                            multiStarter);
                    }
                }

                var qryParticipants = _danceCompHelperDb.Participants
                    .TagWith(
                        nameof(GetParticipants) + "(Guid?, Guid?, bool)[2]")
                    .Include(
                        x => x.CompetitionClass)
                    .Where(
                        // "Ignore" is checked below!
                        x => x.CompetitionId == foundComp.CompetitionId);

                if (showAll == false)
                {
                    qryParticipants = qryParticipants.Where(
                        x => x.Ignore == false);
                }

                if (foundCompClass != null)
                {
                    qryParticipants = qryParticipants.Where(
                        x => x.CompetitionClassId == foundCompClass.CompetitionClassId);
                }

                foreach (var curPart in qryParticipants
                    .OrderBy(
                        x => x.CompetitionClass.OrgClassId)
                    .ThenBy(
                        x => x.CompetitionClass.CompetitionClassName)
                    .ThenByDefault())
                {
                    if (includeInfos)
                    {
                        // CAUTION: EF is caching, if we dont want wrong values
                        // we need to recreate this!..
                        curPart.DisplayInfo = new ParticipantDisplayInfo();

                        var useDisplayInfo = curPart.DisplayInfo;
                        useDisplayInfo.MultipleStartInfo = new CheckMultipleStartInfo();

                        if (multiStarterByParticipantsId.TryGetValue(
                            curPart.ParticipantId,
                            out var curClassInfos))
                        {
                            var useMultiStartInfo = useDisplayInfo.MultipleStartInfo;
                            useMultiStartInfo.MultipleStarts = true;
                            useMultiStartInfo.MultipleStartsInfo =
                                curClassInfos.GetCompetitionClasseNames();
                            useMultiStartInfo.IncludedCompetitionClasses.AddRange(
                                curClassInfos);
                        }

                        if (participantChecker != null)
                        {
                            useDisplayInfo.PromotionInfo = participantChecker.CheckParticipantPromotion(
                                curPart);
                        }
                    }

                    yield return curPart;
                }
            }
            finally
            {
                dbTrans?.Rollback();
            }
        }

        public IEnumerable<AdjudicatorPanel> GetAdjudicatorPanels(
            Guid? competitionId,
            bool includeInfos = false,
            bool useTransaction = true)
        {
            if (competitionId == null)
            {
                yield break;
            }

            using var dbTrans = _danceCompHelperDb.BeginTransaction(
                useTransaction);

            try
            {
                var foundComp = GetCompetition(
                    competitionId,
                    false);

                if (foundComp == null)
                {
                    yield break;
                }

                foreach (var curAdjPanel in _danceCompHelperDb.AdjudicatorPanels
                    .TagWith(
                        nameof(GetAdjudicatorPanels) + "(Guid?, bool)[0]")
                    .Where(
                        x => x.CompetitionId == foundComp.CompetitionId))
                {
                    if (includeInfos)
                    {
                        curAdjPanel.DisplayInfo = new AdjudicatorPanelDisplayInfos();
                        var useDisplayInfo = curAdjPanel.DisplayInfo;

                        useDisplayInfo.CountAdjudicators = _danceCompHelperDb.Adjudicators
                            .TagWith(
                                nameof(GetAdjudicatorPanels) + "(Guid?, bool)[1]")
                            .Count(
                                x => x.AdjudicatorPanelId == curAdjPanel.AdjudicatorPanelId);
                    }

                    yield return curAdjPanel;
                }
            }
            finally
            {
                dbTrans?.Rollback();
            }
        }

        public IEnumerable<Adjudicator> GetAdjudicators(
            Guid? competitionId,
            Guid? adjudicatorPanelId,
            bool includeInfos = false,
            bool useTransaction = true)
        {
            if (competitionId == null)
            {
                yield break;
            }

            using var dbTrans = _danceCompHelperDb.BeginTransaction(
                useTransaction);

            try
            {
                var foundComp = GetCompetition(
                    competitionId,
                    false);

                if (foundComp == null)
                {
                    yield break;
                }

                var useAdjPanels = new List<Guid>();

                if (adjudicatorPanelId == null)
                {
                    useAdjPanels.AddRange(
                        _danceCompHelperDb.AdjudicatorPanels
                            .TagWith(
                                nameof(GetAdjudicators) + "(Guid?, Guid?)[1]")
                            .Where(
                                x => x.CompetitionId == foundComp.CompetitionId)
                            .OrderBy(
                                x => x.Name)
                            .Select(
                                x => x.AdjudicatorPanelId));
                }
                else
                {
                    var foundAdjPanel = _danceCompHelperDb.AdjudicatorPanels
                        .TagWith(
                            nameof(GetAdjudicators) + "(Guid?, Guid?)[3]")
                        .FirstOrDefault(
                            x => x.CompetitionId == foundComp.CompetitionId);

                    if (foundAdjPanel == null)
                    {
                        yield break;
                    }

                    useAdjPanels.Add(
                        foundAdjPanel.AdjudicatorPanelId);
                }

                foreach (var curAdjPanelId in useAdjPanels.Distinct())
                {
                    foreach (var curRetAdj in _danceCompHelperDb.Adjudicators
                        .TagWith(
                            nameof(GetAdjudicators) + "(Guid?, Guid?)[4]")
                        .Include(
                            x => x.AdjudicatorPanel)
                        .Where(
                            x => x.AdjudicatorPanelId == curAdjPanelId)
                        .OrderBy(
                            x => x.Abbreviation))
                    {
                        yield return curRetAdj;
                    }
                }
            }
            finally
            {
                dbTrans?.Rollback();
            }
        }

        public IEnumerable<MultipleStarter> GetMultipleStarter(
            Guid competitionId,
            bool useTransaction = true)
        {
            using var dbTrans = _danceCompHelperDb.BeginTransaction(
                useTransaction);

            try
            {
                var foundComp = GetCompetition(
                    competitionId,
                    false);

                if (foundComp == null)
                {
                    yield break;
                }

                var multipleStarterGouping = _danceCompHelperDb.Participants
                    .TagWith(
                        nameof(GetMultipleStarter) + "(Guid)[0]")
                    .Where(
                        x => x.CompetitionId == foundComp.CompetitionId
                        && x.Ignore == false)
                    .GroupBy(
                        x => new
                        {
                            x.NamePartA,
                            x.OrgIdPartA,
                            x.NamePartB,
                            x.OrgIdPartB,
                            x.ClubName,
                            x.OrgIdClub,
                        })
                    .Where(
                        x => x.Count() >= 2)
                    .Select(
                        x => x.Key);

                foreach (var curMultiStart in multipleStarterGouping)
                {
                    var allPartInfo = _danceCompHelperDb.Participants
                        .TagWith(
                            nameof(GetMultipleStarter) + "(Guid)[1]")
                        .Include(
                            x => x.CompetitionClass)
                        .Where(
                            x => x.CompetitionId == foundComp.CompetitionId
                            && x.NamePartA == curMultiStart.NamePartA
                            && x.OrgIdPartA == curMultiStart.OrgIdPartA
                            && x.NamePartB == curMultiStart.NamePartB
                            && x.OrgIdPartB == curMultiStart.OrgIdPartB
                            && x.ClubName == curMultiStart.ClubName
                            && x.OrgIdClub == curMultiStart.OrgIdClub
                            && x.Ignore == false)
                        .ToList();

                    yield return new MultipleStarter(
                        allPartInfo);
                }
            }
            finally
            {
                _logger.LogTrace(
                    "{Method}() done",
                    nameof(GetMultipleStarter));

                dbTrans?.Rollback();
            }
        }

        #region Get helper

        public IParticipantChecker? GetParticipantChecker(
            Competition competition)
        {
            switch (competition.Organization)
            {
                case OrganizationEnum.Oetsv:
                    return _serviceProvider.GetRequiredService<OetsvParticipantChecker>();

                default:
                    _logger.LogError(
                        "{Method}: '{Organization}' not yet implemented!",
                            nameof(GetParticipantChecker),
                            competition.Organization);
                    break;
            }

            return null;
        }

        public ICompetitonClassChecker? GetCompetitonClassChecker(
            Competition competition)
        {
            switch (competition.Organization)
            {
                case OrganizationEnum.Oetsv:
                    return new OetsvCompetitonClassChecker();

                default:
                    _logger.LogError(
                        "{Method}: '{Organization}' not yet implemented!",
                            nameof(GetCompetitonClassChecker),
                            competition.Organization);
                    break;
            }

            return null;
        }

        #endregion // Get helper

        #region Conversions/Lookups

        public Guid? GetCompetition(
            string byName,
            bool useTransaction = true)
        {
            using var dbTrans = _danceCompHelperDb.BeginTransaction(
                useTransaction);

            try
            {
                return _danceCompHelperDb.Competitions
                    .TagWith(
                        nameof(GetCompetition) + "(string)[0]")
                    .FirstOrDefault(
                        x => x.CompetitionName == byName)
                    ?.CompetitionId;
            }
            finally
            {
                _logger.LogTrace(
                    "{Method}() done",
                    nameof(GetCompetition));

                dbTrans?.Rollback();
            }
        }

        public Guid? FindCompetition(
            Guid? byAnyId,
            bool useTransaction = true)
        {
            if (byAnyId.HasValue == false)
            {
                return null;
            }

            using var dbTrans = _danceCompHelperDb.BeginTransaction(
                useTransaction);

            try
            {
                var foundCompId = _danceCompHelperDb.CompetitionClasses
                    .TagWith(
                        nameof(FindCompetition) + "(Guid)[0]")
                    .FirstOrDefault(
                        x => x.CompetitionId == byAnyId
                        || x.CompetitionClassId == byAnyId
                        || x.AdjudicatorPanelId == byAnyId)
                    ?.CompetitionId;

                if (foundCompId == null)
                {
                    foundCompId = _danceCompHelperDb.Competitions
                        .TagWith(
                            nameof(FindCompetition) + "(Guid)[1]")
                        .FirstOrDefault(
                            x => x.CompetitionId == byAnyId)
                        ?.CompetitionId;
                }

                if (foundCompId == null)
                {
                    foundCompId = _danceCompHelperDb.Participants
                        .TagWith(
                            nameof(FindCompetition) + "(Guid)[2]")
                        .FirstOrDefault(
                            x => x.ParticipantId == byAnyId)
                        ?.CompetitionId;
                }

                if (foundCompId == null)
                {
                    var foundAdj = _danceCompHelperDb.Adjudicators
                        .TagWith(
                            nameof(FindCompetition) + "(Guid)[4]")
                        .FirstOrDefault(
                            x => x.AdjudicatorId == byAnyId);

                    if (foundAdj != null)
                    {
                        foundCompId = _danceCompHelperDb.AdjudicatorPanels
                            .TagWith(
                                nameof(FindCompetition) + "(Guid)[5]")
                            .FirstOrDefault(
                                x => x.AdjudicatorPanelId == foundAdj.AdjudicatorPanelId)
                            ?.CompetitionId;
                    }
                }

                if (foundCompId == null)
                {
                    foundCompId = _danceCompHelperDb.AdjudicatorPanels
                        .TagWith(
                            nameof(FindCompetition) + "(Guid)[6]")
                        .FirstOrDefault(
                            x => x.AdjudicatorPanelId == byAnyId)
                        ?.CompetitionId;
                }

                return foundCompId;
            }
            finally
            {
                _logger.LogTrace(
                    "{Method}() done",
                    nameof(FindCompetition));

                dbTrans?.Rollback();
            }
        }

        public Guid? FindCompetitionClass(
            Guid? byAnyId,
            bool useTransaction = true)
        {
            if (byAnyId.HasValue == false)
            {
                return null;
            }

            using var dbTrans = _danceCompHelperDb.BeginTransaction(
                useTransaction);

            try
            {
                var foundCompClassId = _danceCompHelperDb.CompetitionClasses
                    .TagWith(
                        nameof(FindCompetitionClass) + "(Guid)[0]")
                    .FirstOrDefault(
                        x => x.CompetitionId == byAnyId
                        || x.CompetitionClassId == byAnyId
                        || x.AdjudicatorPanelId == byAnyId)
                    ?.CompetitionClassId;

                if (foundCompClassId == null)
                {
                    foundCompClassId = _danceCompHelperDb.Participants
                        .TagWith(
                            nameof(FindCompetitionClass) + "(Guid)[1]")
                        .FirstOrDefault(
                            x => x.ParticipantId == byAnyId)
                        ?.CompetitionClassId;
                }

                return foundCompClassId;
            }
            finally
            {
                _logger.LogTrace(
                    "{Method}() done",
                    nameof(FindCompetitionClass));

                dbTrans?.Rollback();
            }
        }

        public Guid? GetCompetitionClass(
            string byName,
            bool useTransaction = true)
        {
            using var dbTrans = _danceCompHelperDb.BeginTransaction(
                useTransaction);

            try
            {
                return _danceCompHelperDb.CompetitionClasses
                    .TagWith(
                        nameof(GetCompetitionClass) + "(string)[0]")
                    .FirstOrDefault(
                        x => x.CompetitionClassName == byName
                        /* TODO: realy need ignore?.. */
                        && x.Ignore == false)
                    ?.CompetitionClassId;
            }
            finally
            {
                _logger.LogTrace(
                    "{Method}() done",
                    nameof(GetCompetitionClass));

                dbTrans?.Rollback();
            }
        }

        public CompetitionClass? GetCompetitionClass(
            Guid competitionClassId,
            bool useTransaction = true)
        {
            using var dbTrans = _danceCompHelperDb.BeginTransaction(
                useTransaction);

            try
            {
                return _danceCompHelperDb.CompetitionClasses
                    .TagWith(
                        nameof(GetCompetitionClass) + "(Guid)[0]")
                    .FirstOrDefault(
                        x => x.CompetitionClassId == competitionClassId);
            }
            finally
            {
                _logger.LogTrace(
                    "{Method}() done",
                    nameof(GetCompetitionClass));

                dbTrans?.Rollback();
            }
        }

        public Participant? GetParticipant(
            Guid participantId,
            bool useTransaction = true)
        {
            using var dbTrans = _danceCompHelperDb.BeginTransaction(
                useTransaction);

            try
            {
                return _danceCompHelperDb.Participants
                    .TagWith(
                        nameof(GetParticipant) + "(Guid)[0]")
                    .FirstOrDefault(
                        x => x.ParticipantId == participantId);
            }
            finally
            {
                _logger.LogTrace(
                    "{Method}() done",
                    nameof(GetParticipant));

                dbTrans?.Rollback();
            }
        }

        public AdjudicatorPanel? GetAdjudicatorPanel(
            Guid adjudicatorPanelId,
            bool useTransaction = true)
        {
            using var dbTrans = _danceCompHelperDb.BeginTransaction(
                useTransaction);

            try
            {
                return _danceCompHelperDb.AdjudicatorPanels
                    .TagWith(
                        nameof(GetAdjudicatorPanel) + "(Guid)[0]")
                    .FirstOrDefault(
                        x => x.AdjudicatorPanelId == adjudicatorPanelId);
            }
            finally
            {
                _logger.LogTrace(
                    "{Method}() done",
                    nameof(GetAdjudicatorPanel));

                dbTrans?.Rollback();
            }
        }

        public Adjudicator? GetAdjudicator(
            Guid adjudicatorId,
            bool useTransaction = true)
        {
            using var dbTrans = _danceCompHelperDb.BeginTransaction(
                useTransaction);

            try
            {
                return _danceCompHelperDb.Adjudicators
                    .TagWith(
                        nameof(GetAdjudicator) + "(Guid)[0]")
                    .Include(
                         x => x.AdjudicatorPanel)
                    .FirstOrDefault(
                        x => x.AdjudicatorId == adjudicatorId);
            }
            finally
            {
                _logger.LogTrace(
                    "{Method}() done",
                    nameof(GetAdjudicator));

                dbTrans?.Rollback();
            }
        }

        #endregion // Conversions/Lookups

        #region Competition Crud

        public void CreateCompetition(
            string competitionName,
            OrganizationEnum organization,
            string orgCompetitionId,
            string? competitionInfo,
            DateTime competitionDate,
            string? comment)
        {
            using var dbTrans = _danceCompHelperDb.BeginTransaction()
                ?? throw new ArgumentNullException(
                    "dbTrans");

            try
            {
                _danceCompHelperDb.Competitions.Add(
                    new Competition()
                    {
                        CompetitionName = competitionName,
                        Organization = organization,
                        OrgCompetitionId = orgCompetitionId,
                        CompetitionInfo = competitionInfo,
                        CompetitionDate = competitionDate,
                        Comment = comment,
                    });

                _danceCompHelperDb.SaveChanges();
                dbTrans.Commit();
            }
            catch (Exception exc)
            {
                _logger.LogError(
                    exc,
                    "Error during {Method}: {Message}",
                    nameof(CreateCompetition),
                    exc.Message);

                dbTrans.Rollback();

                throw;
            }
            finally
            {
                _logger.LogTrace(
                    "{Method}() done",
                    nameof(CreateCompetition));
            }
        }

        public void EditCompetition(
            Guid competitionId,
            string competitionName,
            OrganizationEnum organization,
            string orgCompetitionId,
            string? competitionInfo,
            DateTime competitionDate,
            string? comment)
        {
            using var dbTrans = _danceCompHelperDb.BeginTransaction()
                ?? throw new ArgumentNullException(
                    "dbTrans");

            try
            {
                var foundComp = GetCompetition(
                    competitionId,
                    false);

                if (foundComp == null)
                {
                    throw new ArgumentException(
                        string.Format(
                            "{0} with id '{1}' not found!",
                            nameof(Competition),
                            competitionId));
                }

                foundComp.CompetitionName = competitionName;
                foundComp.Organization = organization;
                foundComp.OrgCompetitionId = orgCompetitionId;
                foundComp.CompetitionInfo = competitionInfo;
                foundComp.CompetitionDate = competitionDate;
                foundComp.Comment = comment;

                _danceCompHelperDb.SaveChanges();
                dbTrans.Commit();
            }
            catch (Exception exc)
            {
                _logger.LogError(
                    exc,
                    "Error during {Method}: {Message}",
                    nameof(EditCompetition),
                    exc.Message);

                dbTrans.Rollback();

                throw;
            }
            finally
            {
                _logger.LogTrace(
                    "{Method}() done",
                    nameof(EditCompetition));
            }
        }

        public void RemoveCompetition(
            Guid competitionId)
        {
            using var dbTrans = _danceCompHelperDb.BeginTransaction()
                ?? throw new ArgumentNullException(
                    "dbTrans");

            try
            {
                var foundComp = GetCompetition(
                    competitionId,
                    false);

                if (foundComp == null)
                {
                    _logger.LogWarning(
                        "{Competition} with id '{CompetitionId}' not found!",
                        nameof(Competition),
                        competitionId);
                    return;
                }

                _danceCompHelperDb.Competitions.Remove(
                    foundComp);

                _danceCompHelperDb.SaveChanges();
                dbTrans.Commit();
            }
            catch (Exception exc)
            {
                _logger.LogError(
                    exc,
                    "Error during {Method}: {Message}",
                    nameof(RemoveCompetition),
                    exc.Message);

                dbTrans.Rollback();

                throw;
            }
            finally
            {
                _logger.LogTrace(
                    "{Method}() done",
                    nameof(RemoveCompetition));
            }
        }

        #endregion //  Competition Crud

        #region AdjudicatorPanel Crud

        public void CreateAdjudicatorPanel(
            Guid competitionId,
            string name,
            string? comment)
        {
            using var dbTrans = _danceCompHelperDb.BeginTransaction()
                ?? throw new ArgumentNullException(
                    "dbTrans");

            try
            {
                var foundComp = GetCompetition(
                    competitionId,
                    false);

                if (foundComp == null)
                {
                    throw new ArgumentException(
                        string.Format(
                            "{0} with id '{1}' not found!",
                            nameof(Competition),
                            competitionId));
                }

                _danceCompHelperDb.AdjudicatorPanels.Add(
                    new AdjudicatorPanel()
                    {
                        Competition = foundComp,
                        Name = name,
                        Comment = comment,
                    });

                _danceCompHelperDb.SaveChanges();
                dbTrans.Commit();
            }
            catch (Exception exc)
            {
                _logger.LogError(
                    exc,
                    "Error during {Method}: {Message}",
                    nameof(CreateAdjudicatorPanel),
                    exc.Message);

                dbTrans.Rollback();

                throw;
            }
            finally
            {
                _logger.LogTrace(
                    "{Method}() done",
                    nameof(CreateAdjudicatorPanel));
            }
        }

        public void EditAdjudicatorPanel(
            Guid adjudicatorPanelId,
            Guid competitionId,
            string name,
            string? comment)
        {
            using var dbTrans = _danceCompHelperDb.BeginTransaction()
                ?? throw new ArgumentNullException(
                    "dbTrans");

            try
            {
                var foundAdjPanel = _danceCompHelperDb.AdjudicatorPanels
                    .TagWith(
                        nameof(EditAdjudicatorPanel) + "(Guid, ...)[0]")
                    .FirstOrDefault(
                        x => x.AdjudicatorPanelId == adjudicatorPanelId);

                if (foundAdjPanel == null)
                {
                    throw new ArgumentException(
                        string.Format(
                            "{0} with id '{1}' not found!",
                            nameof(AdjudicatorPanel),
                            adjudicatorPanelId));
                }

                foundAdjPanel.CompetitionId = competitionId;
                foundAdjPanel.Name = name;
                foundAdjPanel.Comment = comment;

                _danceCompHelperDb.SaveChanges();
                dbTrans.Commit();
            }
            catch (Exception exc)
            {
                _logger.LogError(
                    exc,
                    "Error during {Method}: {Message}",
                    nameof(EditAdjudicatorPanel),
                    exc.Message);

                dbTrans.Rollback();

                throw;
            }
            finally
            {
                _logger.LogTrace(
                    "{Method}() done",
                    nameof(EditAdjudicatorPanel));
            }
        }

        public void RemoveAdjudicatorPanel(
            Guid adjudicatorPanelId)
        {
            using var dbTrans = _danceCompHelperDb.BeginTransaction()
                ?? throw new ArgumentNullException(
                    "dbTrans");

            try
            {
                var foundAdjPanel = _danceCompHelperDb.AdjudicatorPanels
                    .TagWith(
                        nameof(RemoveAdjudicatorPanel) + "(Guid)")
                    .FirstOrDefault(
                        x => x.AdjudicatorPanelId == adjudicatorPanelId);

                if (foundAdjPanel == null)
                {
                    _logger.LogWarning(
                        "{AdjudicatorPanel} with id '{AdjudicatorPanelId}' not found!",
                        nameof(AdjudicatorPanel),
                        adjudicatorPanelId);
                    return;
                }

                _danceCompHelperDb.AdjudicatorPanels.Remove(
                    foundAdjPanel);

                _danceCompHelperDb.SaveChanges();
                dbTrans.Commit();
            }
            catch (Exception exc)
            {
                _logger.LogError(
                    exc,
                    "Error during {Method}: {Message}",
                    nameof(RemoveAdjudicatorPanel),
                    exc.Message);

                dbTrans.Rollback();

                throw;
            }
            finally
            {
                _logger.LogTrace(
                    "{Method}() done",
                    nameof(RemoveAdjudicatorPanel));
            }
        }

        #endregion //  AdjudicatorPanel Crud

        #region Adjudicator Crud

        public void CreateAdjudicator(
            Guid adjudicatorPanelId,
            string abbreviation,
            string name,
            string? comment)
        {
            using var dbTrans = _danceCompHelperDb.BeginTransaction()
                ?? throw new ArgumentNullException(
                    "dbTrans");

            try
            {
                _danceCompHelperDb.Adjudicators.Add(
                    new Adjudicator()
                    {
                        AdjudicatorPanelId = adjudicatorPanelId,
                        Abbreviation = abbreviation,
                        Name = name,
                        Comment = comment,
                    });

                _danceCompHelperDb.SaveChanges();
                dbTrans.Commit();
            }
            catch (Exception exc)
            {
                _logger.LogError(
                    exc,
                    "Error during {Method}: {Message}",
                    nameof(CreateAdjudicator),
                    exc.Message);

                dbTrans.Rollback();

                throw;
            }
            finally
            {
                _logger.LogTrace(
                    "{Method}() done",
                    nameof(CreateAdjudicator));
            }
        }

        public void EditAdjudicator(
            Guid adjudicatorId,
            Guid adjudicatorPanelId,
            string abbreviation,
            string name,
            string? comment)
        {
            using var dbTrans = _danceCompHelperDb.BeginTransaction()
                ?? throw new ArgumentNullException(
                    "dbTrans");

            try
            {
                var foundAdj = GetAdjudicator(
                    adjudicatorId,
                    false);

                if (foundAdj == null)
                {
                    throw new ArgumentException(
                        string.Format(
                            "{0} with id '{1}' not found!",
                            nameof(Adjudicator),
                            adjudicatorId));
                }

                foundAdj.AdjudicatorPanelId = adjudicatorPanelId;
                foundAdj.Abbreviation = abbreviation;
                foundAdj.Name = name;
                foundAdj.Comment = comment;

                _danceCompHelperDb.SaveChanges();
                dbTrans.Commit();
            }
            catch (Exception exc)
            {
                _logger.LogError(
                    exc,
                    "Error during {Method}: {Message}",
                    nameof(EditAdjudicator),
                    exc.Message);

                dbTrans.Rollback();

                throw;
            }
            finally
            {
                _logger.LogTrace(
                    "{Method}() done",
                    nameof(EditAdjudicator));
            }
        }

        public void RemoveAdjudicator(
            Guid adjudicatorId)
        {
            using var dbTrans = _danceCompHelperDb.BeginTransaction()
                ?? throw new ArgumentNullException(
                    "dbTrans");

            try
            {
                var foundAdj = GetAdjudicator(
                    adjudicatorId,
                    false);

                if (foundAdj == null)
                {
                    _logger.LogWarning(
                        "{Adjudicator} with id '{AdjudicatorId}' not found!",
                        nameof(Adjudicator),
                        adjudicatorId);
                    return;
                }

                _danceCompHelperDb.Adjudicators.Remove(
                    foundAdj);

                _danceCompHelperDb.SaveChanges();
                dbTrans.Commit();
            }
            catch (Exception exc)
            {
                _logger.LogError(
                    exc,
                    "Error during {Method}: {Message}",
                    nameof(RemoveAdjudicator),
                    exc.Message);

                dbTrans.Rollback();

                throw;
            }
            finally
            {
                _logger.LogTrace(
                    "{Method}() done",
                    nameof(RemoveAdjudicator));
            }
        }

        #endregion //  Adjudicator Crud

        #region CompetitionClass Crud

        public void CreateCompetitionClass(
            Guid competitionId,
            string competitionClassName,
            Guid? followUpCompetitionClassId,
            Guid adjudicatorPanelId,
            string orgClassId,
            string? discipline,
            string? ageClass,
            string? ageGroup,
            string? className,
            int minStartsForPromotion,
            double minPointsForPromotion,
            double pointsForFirst,
            int extraManualStarter,
            string? comment,
            bool ignore,
            string? competitionColor)
        {
            using var dbTrans = _danceCompHelperDb.BeginTransaction()
                ?? throw new ArgumentNullException(
                    "dbTrans");

            try
            {
                var foundCompId = GetCompetition(
                    competitionId,
                    false);

                if (foundCompId == null)
                {
                    throw new ArgumentException(
                        string.Format(
                            "{0} with id '{1}' not found!",
                            nameof(Competition),
                            competitionId));
                }

                _danceCompHelperDb.CompetitionClasses.Add(
                    new CompetitionClass()
                    {
                        Competition = foundCompId,
                        OrgClassId = orgClassId,
                        CompetitionClassName = competitionClassName,
                        FollowUpCompetitionClassId = followUpCompetitionClassId == Guid.Empty
                            ? null
                            : followUpCompetitionClassId,
                        AdjudicatorPanelId = adjudicatorPanelId,
                        Discipline = discipline,
                        AgeClass = ageClass,
                        AgeGroup = ageGroup,
                        Class = className,
                        MinStartsForPromotion = minStartsForPromotion,
                        MinPointsForPromotion = minPointsForPromotion,
                        PointsForFirst = pointsForFirst,
                        ExtraManualStarter = extraManualStarter,
                        Comment = comment,
                        Ignore = ignore,
                        CompetitionColor = competitionColor,
                    });

                _danceCompHelperDb.SaveChanges();
                dbTrans.Commit();
            }
            catch (Exception exc)
            {
                _logger.LogError(
                    exc,
                    "Error during {Method}: {Message}",
                    nameof(CreateCompetitionClass),
                    exc.Message);

                dbTrans.Rollback();

                throw;
            }
            finally
            {
                _logger.LogTrace(
                    "{Method}() done",
                    nameof(CreateCompetitionClass));
            }
        }

        public void EditCompetitionClass(
            Guid competitionClassId,
            string competitionClassName,
            Guid? followUpCompetitionClassId,
            Guid adjudicatorPanelId,
            string orgClassId,
            string? discipline,
            string? ageClass,
            string? ageGroup,
            string? className,
            int minStartsForPromotion,
            double minPointsForPromotion,
            double pointsForFirst,
            int extraManualStarter,
            string? comment,
            bool ignore,
            string? competitionColor)
        {
            using var dbTrans = _danceCompHelperDb.BeginTransaction()
                ?? throw new ArgumentNullException(
                    "dbTrans");

            try
            {
                var foundCompClass = GetCompetitionClass(
                    competitionClassId,
                    false);

                if (foundCompClass == null)
                {
                    throw new ArgumentException(
                        string.Format(
                            "{0} with id '{1}' not found!",
                            nameof(CompetitionClass),
                            competitionClassId));
                }

                foundCompClass.OrgClassId = orgClassId;
                foundCompClass.CompetitionClassName = competitionClassName;
                foundCompClass.FollowUpCompetitionClassId = followUpCompetitionClassId == Guid.Empty
                    ? null
                    : followUpCompetitionClassId;
                foundCompClass.AdjudicatorPanelId = adjudicatorPanelId;
                foundCompClass.Discipline = discipline;
                foundCompClass.AgeClass = ageClass;
                foundCompClass.AgeGroup = ageGroup;
                foundCompClass.Class = className;
                foundCompClass.MinStartsForPromotion = minStartsForPromotion;
                foundCompClass.MinPointsForPromotion = minPointsForPromotion;
                foundCompClass.PointsForFirst = pointsForFirst;
                foundCompClass.ExtraManualStarter = extraManualStarter;
                foundCompClass.Comment = comment;
                foundCompClass.Ignore = ignore;
                foundCompClass.CompetitionColor = competitionColor;

                _danceCompHelperDb.SaveChanges();
                dbTrans.Commit();
            }
            catch (Exception exc)
            {
                _logger.LogError(
                    exc,
                    "Error during {Method}: {Message}",
                    nameof(EditCompetitionClass),
                    exc.Message);

                dbTrans.Rollback();

                throw;
            }
            finally
            {
                _logger.LogTrace(
                    "{Method}() done",
                    nameof(EditCompetitionClass));
            }
        }

        public void RemoveCompetitionClass(
            Guid competitionClassId)
        {
            using var dbTrans = _danceCompHelperDb.BeginTransaction()
                ?? throw new ArgumentNullException(
                    "dbTrans");

            try
            {
                var foundCompClass = GetCompetitionClass(
                    competitionClassId,
                    false);

                if (foundCompClass == null)
                {
                    _logger.LogWarning(
                        "{CompetitionClass} with id '{CompetitionClassId}' not found!",
                        nameof(CompetitionClass),
                        competitionClassId);
                    return;
                }

                _danceCompHelperDb.CompetitionClasses.Remove(
                    foundCompClass);

                _danceCompHelperDb.SaveChanges();
                dbTrans.Commit();
            }
            catch (Exception exc)
            {
                _logger.LogError(
                    exc,
                    "Error during {Method}: {Message}",
                    nameof(RemoveCompetitionClass),
                    exc.Message);

                dbTrans.Rollback();

                throw;
            }
            finally
            {
                _logger.LogTrace(
                    "{Method}() done",
                    nameof(RemoveCompetitionClass));
            }
        }

        #endregion //  CompetitionClass Crud

        #region Participant Crud

        public void CreateParticipant(
            Guid competitionId,
            Guid competitionClassId,
            int startNumber,
            // A
            string namePartA,
            string? orgIdPartA,
            // B
            string? namePartB,
            string? orgIdPartB,
            string? clubName,
            string? orgIdClub,
            // A
            double orgPointsPartA,
            int orgStartsPartA,
            int? minStartsForPromotionPartA,
            bool? orgAlreadyPromotedPartA,
            string? orgAlreadyPromotedInfoPartA,
            // B
            double? orgPointsPartB,
            int? orgStartsPartB,
            int? minStartsForPromotionPartB,
            bool? orgAlreadyPromotedPartB,
            string? orgAlreadyPromotedInfoPartB,
            string? comment,
            bool ignore)
        {
            using var dbTrans = _danceCompHelperDb.BeginTransaction()
                ?? throw new ArgumentNullException(
                    "dbTrans");

            try
            {
                var foundCompId = GetCompetition(
                    competitionId,
                    false);

                if (foundCompId == null)
                {
                    throw new ArgumentException(
                        string.Format(
                            "{0} with id '{1}' not found!",
                            nameof(Competition),
                            competitionId));
                }

                var foundCompClassId = GetCompetitionClass(
                    competitionClassId,
                    false);

                if (foundCompClassId == null)
                {
                    throw new ArgumentException(
                        string.Format(
                            "{0} with id '{1}' not found!",
                            nameof(CompetitionClass),
                            competitionClassId));
                }

                _danceCompHelperDb.Participants.Add(
                    new Participant()
                    {
                        CompetitionId = competitionId,
                        CompetitionClassId = competitionClassId,
                        StartNumber = startNumber,
                        NamePartA = namePartA,
                        OrgIdPartA = orgIdPartA,
                        NamePartB = namePartB,
                        OrgIdPartB = orgIdPartB,
                        ClubName = clubName,
                        OrgIdClub = orgIdClub,
                        // A
                        OrgPointsPartA = orgPointsPartA,
                        OrgStartsPartA = orgStartsPartA,
                        MinStartsForPromotionPartA = minStartsForPromotionPartA,
                        OrgAlreadyPromotedPartA = orgAlreadyPromotedPartA,
                        OrgAlreadyPromotedInfoPartA = orgAlreadyPromotedInfoPartA,
                        // B
                        OrgPointsPartB = orgPointsPartB,
                        OrgStartsPartB = orgStartsPartB,
                        MinStartsForPromotionPartB = minStartsForPromotionPartB,
                        OrgAlreadyPromotedPartB = orgAlreadyPromotedPartB,
                        OrgAlreadyPromotedInfoPartB = orgAlreadyPromotedInfoPartB,
                        Comment = comment,
                        Ignore = ignore,
                    });

                _danceCompHelperDb.SaveChanges();
                dbTrans.Commit();
            }
            catch (Exception exc)
            {
                _logger.LogError(
                    exc,
                    "Error during {Method}: {Message}",
                    nameof(CreateParticipant),
                    exc.Message);

                dbTrans.Rollback();

                throw;
            }
            finally
            {
                _logger.LogTrace(
                    "{Method}() done",
                    nameof(CreateParticipant));
            }
        }

        public void EditParticipant(
            Guid participantId,
            Guid competitionClassId,
            int startNumber,
            // A
            string namePartA,
            string? orgIdPartA,
            // A
            string? namePartB,
            string? orgIdPartB,
            string? clubName,
            string? orgIdClub,
            // A
            double orgPointsPartA,
            int orgStartsPartA,
            int? minStartsForPromotionPartA,
            bool? orgAlreadyPromotedPartA,
            string? orgAlreadyPromotedInfoPartA,
            // B
            double? orgPointsPartB,
            int? orgStartsPartB,
            int? minStartsForPromotionPartB,
            bool? orgAlreadyPromotedPartB,
            string? orgAlreadyPromotedInfoPartB,
            string? comment,
            bool ignore)
        {
            using var dbTrans = _danceCompHelperDb.BeginTransaction()
                ?? throw new ArgumentNullException(
                    "dbTrans");

            try
            {
                var foundCompClassId = GetCompetitionClass(
                    competitionClassId,
                    false);

                if (foundCompClassId == null)
                {
                    throw new ArgumentException(
                        string.Format(
                            "{0} with id '{1}' not found!",
                            nameof(CompetitionClass),
                            competitionClassId));
                }

                var foundParticipant = _danceCompHelperDb.Participants
                    .TagWith(
                        nameof(EditParticipant) + "(Guid,...)[1]")
                    .FirstOrDefault(
                        x => x.ParticipantId == participantId);

                if (foundParticipant == null)
                {
                    throw new ArgumentException(
                        string.Format(
                            "{0} with id '{1}' not found!",
                            nameof(Participant),
                            participantId));
                }

                foundParticipant.CompetitionClassId = competitionClassId;
                foundParticipant.StartNumber = startNumber;
                foundParticipant.NamePartA = namePartA;
                foundParticipant.OrgIdPartA = orgIdPartA;
                foundParticipant.NamePartB = namePartB;
                foundParticipant.OrgIdPartB = orgIdPartB;
                foundParticipant.ClubName = clubName;
                foundParticipant.OrgIdClub = orgIdClub;
                // A
                foundParticipant.OrgPointsPartA = orgPointsPartA;
                foundParticipant.OrgStartsPartA = orgStartsPartA;
                foundParticipant.MinStartsForPromotionPartA = minStartsForPromotionPartA;
                foundParticipant.OrgAlreadyPromotedPartA = orgAlreadyPromotedPartA;
                foundParticipant.OrgAlreadyPromotedInfoPartA = orgAlreadyPromotedInfoPartA;
                // B
                foundParticipant.OrgPointsPartB = orgPointsPartB;
                foundParticipant.OrgStartsPartB = orgStartsPartB;
                foundParticipant.MinStartsForPromotionPartB = minStartsForPromotionPartB;
                foundParticipant.OrgAlreadyPromotedPartB = orgAlreadyPromotedPartB;
                foundParticipant.OrgAlreadyPromotedInfoPartB = orgAlreadyPromotedInfoPartB;
                foundParticipant.Comment = comment;
                foundParticipant.Ignore = ignore;

                _danceCompHelperDb.SaveChanges();
                dbTrans.Commit();
            }
            catch (Exception exc)
            {
                _logger.LogError(
                    exc,
                    "Error during {Method}: {Message}",
                    nameof(EditParticipant),
                    exc.Message);

                dbTrans.Rollback();

                throw;
            }
            finally
            {
                _logger.LogTrace(
                    "{Method}() done",
                    nameof(EditParticipant));
            }
        }

        public void RemoveParticipant(
            Guid participantId)
        {
            using var dbTrans = _danceCompHelperDb.BeginTransaction()
                ?? throw new ArgumentNullException(
                    "dbTrans");

            try
            {
                var foundParticipant = _danceCompHelperDb.Participants
                    .TagWith(
                        nameof(RemoveParticipant) + "(Guid)[0]")
                    .FirstOrDefault(
                        x => x.ParticipantId == participantId);

                if (foundParticipant == null)
                {
                    _logger.LogWarning(
                        "{Participant} with id '{ParticipantId}' not found!",
                        nameof(Participant),
                        participantId);
                    return;
                }

                _danceCompHelperDb.Participants.Remove(
                    foundParticipant);

                _danceCompHelperDb.SaveChanges();
                dbTrans.Commit();
            }
            catch (Exception exc)
            {
                _logger.LogError(
                    exc,
                    "Error during {Method}: {Message}",
                    nameof(RemoveParticipant),
                    exc.Message);

                dbTrans.Rollback();

                throw;
            }
            finally
            {
                _logger.LogTrace(
                    "{Method}() done",
                    nameof(RemoveParticipant));
            }
        }

        #endregion // Participant Crud

        #region IDisposable

        protected virtual void Dispose(bool disposing)
        {
            _logger.LogDebug(
                "Do '{Method}'",
                nameof(Dispose));

            _danceCompHelperDb.Dispose();
        }

        public void Dispose()
        {
            // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        #endregion // IDisposable


        #region Importer

        public ImportOrUpdateCompetitionStatus ImportOrUpdateCompetition(
            OrganizationEnum organization,
            string? orgCompetitionId,
            ImportTypeEnum importType,
            IEnumerable<string>? filePaths,
            Dictionary<string, string>? parameters = null)
        {
            var retWorkStatus = new ImportOrUpdateCompetitionStatus();

            try
            {
                switch (organization)
                {
                    case OrganizationEnum.Oetsv:
                        if (int.TryParse(
                            orgCompetitionId,
                            out var useCompetitionId) == false)
                        {
                            throw new FormatException(
                                string.Format(
                                    "'{0}' is not a valid {1}-Competition-ID",
                                    orgCompetitionId,
                                    OrganizationEnum.Oetsv));
                        }

                        var oetsvImporter = _serviceProvider.GetRequiredService<OetsvCompetitionImporter>();
                        oetsvImporter.DanceCompetitionHelper = this;
                        oetsvImporter.FindFollowUpClasses = parameters?.ContainsKey(
                            nameof(OetsvCompetitionImporter.FindFollowUpClasses)) ?? false;
                        oetsvImporter.UpdateData = parameters?.ContainsKey(
                            nameof(OetsvCompetitionImporter.UpdateData)) ?? false;

                        Func<List<string>> importFunc;

                        switch (importType)
                        {
                            case ImportTypeEnum.Url:
                                importFunc = () =>
                                {
                                    return oetsvImporter.ImportOrUpdateByUrl(
                                        orgCompetitionId,
                                        oetsvImporter.UpdateData
                                            ? oetsvImporter.GetUpdateUriForOrgId(
                                                useCompetitionId)
                                            : null,
                                        oetsvImporter.GetCompetitioUriForOrgId(
                                            useCompetitionId),
                                        null,
                                        oetsvImporter.GetParticipantsUriForOrgId(
                                            useCompetitionId));
                                };
                                break;

                            case ImportTypeEnum.Excel:
                                var useFiles = filePaths?.ToList() ?? new List<string>();
                                if (useFiles.Count < 2)
                                {
                                    throw new ArgumentNullException(
                                        nameof(filePaths),
                                        string.Format(
                                            "'{0}' must contain at least 2 files!",
                                            nameof(filePaths)));
                                }

                                importFunc = () =>
                                {
                                    return oetsvImporter.ImportOrUpdateByFile(
                                        orgCompetitionId,
                                        useFiles[0],
                                        null,
                                        useFiles[1]);
                                };
                                break;

                            default:
                                throw new NotImplementedException(
                                    string.Format(
                                        "{0} '{1}' not yet implemented!",
                                        nameof(ImportTypeEnum),
                                        importType));
                        }

                        using (var dbTrans = _danceCompHelperDb.BeginTransaction()
                            ?? throw new ArgumentNullException(
                                "dbTrans"))
                        {
                            try
                            {
                                var checkComp = _danceCompHelperDb.Competitions
                                    .TagWith(
                                        nameof(ImportOrUpdateCompetition) + "[01]")
                                    .FirstOrDefault(
                                        x => x.OrgCompetitionId == orgCompetitionId);

                                if (checkComp != null)
                                {
                                    CreateTableHistory(
                                        checkComp.CompetitionId,
                                        useTransaction: false);
                                }

                                retWorkStatus.WorkInfo.AddRange(
                                    importFunc());

                                _danceCompHelperDb.SaveChanges();
                                dbTrans.Commit();

                                // read back infos
                                checkComp = _danceCompHelperDb.Competitions
                                    .TagWith(
                                        nameof(ImportOrUpdateCompetition) + "[02]")
                                    .FirstOrDefault(
                                        x => x.OrgCompetitionId == orgCompetitionId);

                                if (checkComp != null)
                                {
                                    retWorkStatus.OrgCompetitionId = checkComp.OrgCompetitionId;
                                    retWorkStatus.CompetitionId = checkComp.CompetitionId;
                                }
                            }
                            catch (Exception exc)
                            {
                                _logger.LogError(
                                    exc,
                                    "Error during {Organization} import: {ErrorMessage}",
                                    organization,
                                    exc.Message);

                                retWorkStatus.Errors.Add(
                                    exc.Message);
                                retWorkStatus.WorkInfo.Add(
                                    exc.Message);

                                dbTrans.Rollback();
                            }
                        }
                        break;
                }
            }
            catch (Exception exc)
            {
                _logger.LogError(
                    exc,
                    "{Method} error: {ErrorMessage}",
                    nameof(ImportOrUpdateCompetition),
                    exc.Message);

                retWorkStatus.Errors.Add(
                    exc.Message);
                retWorkStatus.WorkInfo.Add(
                    exc.Message);
            }

            return retWorkStatus;
        }

        #endregion // Importer

    }
}
